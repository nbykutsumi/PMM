import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
import numpy as np
from numpy import *
import h5py
from bisect import bisect_left

clat    = 30.00
clon    = 269.0 -360  # -180 - +180
dlatlon = 6
dscan   = 30
BBox    = [[clat-dlatlon, clon-dlatlon],[clat+dlatlon,clon+dlatlon]]
[[lllat,lllon],[urlat,urlon]] = BBox


#oid = 16166
#iy, ey = 1952, 2012
oid = 2421
iy, ey = 2004, 2114

srcDir = '/home/utsumi/temp/out'
prcpPath = srcDir + '/esurf.%06d.y%04d-%04d.npy'%(oid, iy, ey)
latPath  = srcDir + '/lat.%06d.y%04d-%04d.npy'%(oid, iy, ey)
lonPath  = srcDir + '/lon.%06d.y%04d-%04d.npy'%(oid, iy, ey)

jplPath  = '/home/utsumi/bin/PMM/ret-epc/GPM_EPC_002421_20140802_0726.NS_MS.nc'  # HDF file


#********************************
# Functions
#--------------------------------
def extract_domain_2D(a2dat, a2lat, a2lon, clat, clon, dlatlon, dscan):

    nyTmp, nxTmp = a2lat.shape
    a1lat = a2lat[:,nxTmp/2]
    a1lon = a2lon[:,nxTmp/2]
    
    idx_latmax = np.argmax(a1lat)
    a1lat0 = a1lat[:idx_latmax+1]
    a1lat1 = a1lat[idx_latmax+1:]
    a1lon0 = a1lon[:idx_latmax+1]
    a1lon1 = a1lon[idx_latmax+1:]
    
    if (-180<=clat)and(clat <=180):
        #-- search first half: ascending --
        found_domain = 0
        idx_c  = bisect_left(a1lat0, clat)
        latTmp = a1lat0[idx_c]
        lonTmp = a1lon0[idx_c]
        if (clat-dlatlon<=latTmp)&(latTmp <=clat+dlatlon)&(clon-dlatlon<=lonTmp)&(lonTmp<=clon+dlatlon):
            found_domain = 1
        else:
            #-- search second half: descending --
            idx_c  = bisect_left(a1lat1[::-1], clat)
            idx_c  = len(a1lat) - idx_c -1
            latTmp = a1lat[idx_c]
            lonTmp = a1lon[idx_c]
    
            if (clat-dlatlon<=latTmp)&(latTmp <=clat+dlatlon)&(clon-dlatlon<=lonTmp)&(lonTmp<=clon+dlatlon):
                found_domain =1
    
        if found_domain==1:
            idx_first = idx_c - dscan
            idx_last  = idx_c + dscan
            a2odat  = a2dat[idx_first:idx_last+1,:]
            a2olat  = a2lat[idx_first:idx_last+1,:]    
            a2olon  = a2lon[idx_first:idx_last+1,:]
    
        else:
            print 'No matching scans in the target domain are found.'
            print 'Exit'
            sys.exit()
    
        print 'Extract target domain'
        print 'Extracted array size=', a2dat.shape
    
    else:
        pass
    
    return a2odat, a2olat, a2olon 




#*****************
#- Read My data ----

a2dat = np.load(prcpPath)
a2lat = np.load(latPath)
a2lon = np.load(lonPath)

a2dat = ma.masked_less_equal(a2dat,0)

ssize = 1

#*****************
#- Read JPL data ----
with h5py.File(jplPath) as h:
    a2esurfjpl = h['MS/precip1'][:]
    a2dpr      = h['CMB/precip_MS'][:]
    a2latjpl   = h['latitude'][:]
    a2lonjpl   = h['longitude'][:]

print a2esurfjpl.shape
a2esurfjpl, a2latjpl, a2lonjpl = extract_domain_2D(a2esurfjpl, a2latjpl, a2lonjpl, clat, clon, dlatlon, dscan)
a2esurfjpl = ma.masked_less_equal(a2esurfjpl,0)

a2dpr, a2latjpl, a2lonjpl = extract_domain_2D(a2dpr, a2latjpl, a2lonjpl, clat, clon, dlatlon, dscan)
a2dpr = ma.masked_less_equal(a2dpr,0)

#********************************
#-- Draw figure ---
fig   = plt.figure(figsize=(8,8))

#-- My retrieval --
#ax    = fig.add_subplot(111)
ax    = fig.add_axes([0.1,0.5,0.3,0.3])
M     = Basemap(resolution='l', llcrnrlat=lllat, llcrnrlon=lllon, urcrnrlat=urlat, urcrnrlon=urlon, ax=ax)
im    = M.scatter(a2lon, a2lat, c=a2dat, cmap='jet', s=ssize, vmin=0, vmax=20)
M.drawcoastlines()

dgrid      = 5
parallels  = arange(-90,90, dgrid)
meridians  = arange(-180,180,dgrid)
M.drawparallels(parallels, labels=[1,0,0,0], fontsize=8, linewidth=0.5, fmt='%d')
M.drawmeridians(meridians, labels=[0,0,0,1], fontsize=8, linewidth=0.5, fmt='%d')
plt.colorbar(im, orientation='horizontal')

plt.title('NU')
#*****************
#- Figure GPROF ----
ax2 = fig.add_axes([0.1,0.1,0.3,0.3])
M   = Basemap(resolution='l', llcrnrlat=lllat, llcrnrlon=lllon, urcrnrlat=urlat, urcrnrlon=urlon, ax=ax2)
im    = M.scatter(a2lonjpl, a2latjpl, c=a2esurfjpl, cmap='jet', s=ssize, vmin=0, vmax=20)
print a2esurfjpl
M.drawcoastlines()
M.drawparallels(parallels, labels=[1,0,0,0], fontsize=8, linewidth=0.5, fmt='%d')
M.drawmeridians(meridians, labels=[0,0,0,1], fontsize=8, linewidth=0.5, fmt='%d')
plt.colorbar(im, orientation='horizontal')

plt.title('EPC-MS/CMB')
#------------
#- Figure DPR ----
ax2 = fig.add_axes([0.5,0.1,0.3,0.3])
M   = Basemap(resolution='l', llcrnrlat=lllat, llcrnrlon=lllon, urcrnrlat=urlat, urcrnrlon=urlon, ax=ax2)
im  = M.scatter(a2lonjpl, a2latjpl, c=a2dpr, cmap='jet', s=ssize, vmin=0, vmax=20)
M.drawcoastlines()
M.drawparallels(parallels, labels=[1,0,0,0], fontsize=8, linewidth=0.5, fmt='%d')
M.drawmeridians(meridians, labels=[0,0,0,1], fontsize=8, linewidth=0.5, fmt='%d')
plt.colorbar(im, orientation='horizontal')

plt.title('MS/CMB')

##------------
##- Read DPR 9grid mean ----
#dprmeanPath = '/work/hk01/utsumi/PMM/MATCH.GMI.V05A/S1.ABp083-137.Ku.V06A.9ave.precipRateESurface/2017/01/01/precipRateESurface.016166.npy'
#a2datfig   = np.load(dprmeanPath)
#a2datfig   = a2datfig[iy:ey+1]
#
#a2datfig = ma.masked_less_equal(a2datfig,0)
#
##- lat and lon from GPROF ----
#gpDir = '/work/hk01/PMM/NASA/GPM.GMI/2A/V05/2017/01/01/2A.GPM.GMI.GPROF2017v1.20170101-S173441-E190714.016166.V05A.HDF5'
#with h5py.File(gpDir) as h:
#    a2latgmi = h['S1/Latitude'][:]
#    a2longmi = h['S1/Longitude'][:]
#
#a2latfig = a2latgmi[iy:ey+1,83:137+1]
#a2lonfig = a2longmi[iy:ey+1,83:137+1]
#
#print a2datfig.shape, a2latfig.shape, a2lonfig.shape
##- fig --
#ax2 = fig.add_axes([0.5,0.5,0.3,0.3])
#M   = Basemap(resolution='l', llcrnrlat=lllat, llcrnrlon=lllon, urcrnrlat=urlat, urcrnrlon=urlon, ax=ax2)
#im    = M.scatter(a2lonfig, a2latfig, c=a2datfig, cmap='jet', s=ssize, vmin=0, vmax=20)
#print a2esurfgp
#M.drawcoastlines()
#M.drawparallels(parallels, labels=[1,0,0,0], fontsize=8, linewidth=0.5, fmt='%d')
#M.drawmeridians(meridians, labels=[0,0,0,1], fontsize=8, linewidth=0.5, fmt='%d')
#plt.colorbar(im, orientation='horizontal')
#
#plt.title('DPR-9ave')
##------------


outPath  = srcDir + '/esurf.png'
plt.savefig(outPath)
print outPath
